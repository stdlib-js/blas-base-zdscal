{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/zdscal.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar scale = require( '@stdlib/complex-float64-base-scale' ).strided;\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {Complex128Array} input array\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zdscal( 3, 2.0, x, 1, 0 );\n* // x => <Complex128Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction zdscal( N, alpha, x, strideX, offsetX ) {\n\tvar view;\n\tvar ix;\n\tvar sx;\n\tvar i;\n\n\tif ( N <= 0 || alpha === 1.0 ) {\n\t\treturn x;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tview = reinterpret( x, 0 );\n\n\t// Adjust the stride and offset accordingly:\n\tix = offsetX * 2;\n\tsx = strideX * 2;\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tscale( alpha, view, 1, ix, view, 1, ix );\n\t\tix += sx;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zdscal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - constant\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zdscal( 3, 2.0, x, 1 );\n* // x => <Complex128Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\nfunction zdscal( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = zdscal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar zdscal = require( './zdscal.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( zdscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = zdscal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision floating-point constant.\n*\n* @module @stdlib/blas-base-zdscal\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var zdscal = require( '@stdlib/blas-base-zdscal' );\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zdscal( 3, 2.0, x, 1 );\n* // x => <Complex128Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var zdscal = require( '@stdlib/blas-base-zdscal' );\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* zdscal.ndarray( 3, 2.0, x, 1, 0 );\n* // x => <Complex128Array>[ 2.0, 4.0, 6.0, 8.0, 10.0, 12.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar zdscal;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzdscal = main;\n} else {\n\tzdscal = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zdscal;\n\n// exports: { \"ndarray\": \"zdscal.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,6CAA8C,EACrEC,EAAQ,QAAS,oCAAqC,EAAE,QAuB5D,SAASC,EAAQC,EAAGC,EAAOC,EAAGC,EAASC,EAAU,CAChD,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKR,GAAK,GAAKC,IAAU,EACxB,OAAOC,EASR,IANAG,EAAOR,EAAaK,EAAG,CAAE,EAGzBI,EAAKF,EAAU,EACfG,EAAKJ,EAAU,EAETK,EAAI,EAAGA,EAAIR,EAAGQ,IACnBV,EAAOG,EAAOI,EAAM,EAAGC,EAAID,EAAM,EAAGC,CAAG,EACvCA,GAAMC,EAEP,OAAOL,CACR,CAKAN,EAAO,QAAUG,ICxEjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAsBd,SAASC,EAAQC,EAAGC,EAAOC,EAAGC,EAAU,CACvC,OAAOL,EAASE,EAAGC,EAAOC,EAAGC,EAASN,EAAeG,EAAGG,CAAQ,CAAE,CACnE,CAKAP,EAAO,QAAUG,ICpDjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICYjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAASD,EAETC,EAASC,EAMV,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "reinterpret", "scale", "zdscal", "N", "alpha", "x", "strideX", "offsetX", "view", "ix", "sx", "i", "require_zdscal", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "zdscal", "N", "alpha", "x", "strideX", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "zdscal", "ndarray", "join", "tryRequire", "isError", "main", "zdscal", "tmp"]
}
